import java.text.SimpleDateFormat

apply plugin: "kotlin"
apply plugin: "application"

apply plugin: 'net.nemerosa.versioning'

group = 'de.roboplot.plotter'
version = '1.0.0'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.net.nemerosa:versioning:2.8.2"
    }
}

mainClassName = "de.robolab.jfx.MainApp"

static String buildTime() {
    def format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z")
    format.setTimeZone(TimeZone.getTimeZone("UTC"))
    return format.format(new Date())
}

jar {
    includeEmptyDirs = false

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    def authors = []

    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine = ['git', '--no-pager', 'log', "--format='%aN'"]
            standardOutput = os
        }
        authors = os.toString().split("\n").toUnique()
    }

    manifest {
        manifest.attributes "Main-Class": mainClassName

        manifest.attributes "Build-Time": buildTime()
        manifest.attributes "Build-Version": archiveVersion
        manifest.attributes "Build-Tools": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}, java-${System.getProperty('java.version')}"
        manifest.attributes "Build-System": "${System.getProperty("os.name")} '${System.getProperty("os.version")}' (${System.getProperty("os.arch")})"

        manifest.attributes "Build-User": System.properties['user.name']
        manifest.attributes 'Build-Vcs': versioning.info.full
        manifest.attributes "Build-Authors": "$authors"
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "about.html"
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2"
    implementation "no.tornado:tornadofx:1.7.18"
    implementation "org.fxmisc.richtext:richtextfx:0.9.2"
    implementation "de.jensd:fontawesomefx-commons:8.15"
    implementation "de.jensd:fontawesomefx-materialicons:2.2.0-5"
    implementation "de.jensd:fontawesomefx-fontawesome:4.7.0-5"
    implementation 'com.uchuhimo:konf:0.12'

    implementation "io.github.microutils:kotlin-logging:1.5.4"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "org.fusesource.jansi:jansi:1.8" // Needed for windows logging colors

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    implementation 'org.reflections:reflections:0.9.11'

    // This packages are only for jar execution needed (ClassDefNotFound)
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    implementation 'com.uchuhimo:kotlinx-bimap:1.2'
    implementation 'com.typesafe:config:1.3.3'
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'

    implementation "de.westermann:KObserve-jvm:0.9.3"

    testImplementation "org.jboss.arquillian.junit:arquillian-junit-core:1.3.0.Final"
    testImplementation "junit:junit:4.12"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

clean.doFirst() {
    delete("out")
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvm_target"
}
